{"title":"ICPSR - Introduction to Python","markdown":{"yaml":{"title":"ICPSR - Introduction to Python","author":[{"name":"Stone Neilon","url":"https://samanthacsik.github.io/","orcid":"0000-0002-5300-3075","affiliation":"PhD student of political science @ The University of Colorado Boulder","affiliation-url":"https://ucsb-meds.github.io/"}],"date":"06-10-2024","categories":["Summer","ICPSR",2024,"Methods"],"citation":{"url":"https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/"},"image":"python.png.webp","draft":false},"headingText":"Preface","containsRefs":false,"markdown":"\n\n\nIntroduction to Python with Professor Sarah Hunter was a workshop taken at ICPSR in the summer of 2024. You cannot memorize this. Practice makes perfect. You must use it or you will lose it. This course covers the absolute *basics*.\n\n# Software\n\nGoogle Colab is main software used - **this is the one used during class.**\n\n-   be careful with the google AI that helps you with the code. It's cool but not very accurate as of right now.\n\nOptional: Spyder - Spyder is an IDE that makes it similar to an interface like R studio.\n\nOptional: Jupyter Notebooks\n\nIf you want to work with data that is sensitive or private, do NOT upload it to any cloud service. In this case, use Spyder and download/work with the data locally.\n\n# Day 1 - Introduction and Language Basics\n\nIf I want to download Python locally, talk to a TA.\n\n## Getting to know Python\n\n-   Python is more flexible and general than R.\n-   Object oriented\n    -   R is also object oriented.\n-   R is very similar to Python.\n    -   basic syntax is similar.\n-   Why learn python?\n    -   its the most popular programming language\n\n    -   Python is used a lot by data analyst\n\n        -   text analysis, machine learning, and AI are big on Python.\n\n    -   Web scraping very big on Python\n\n    -   Accessing APIs with Python good as well.\n\n        -   APIs are just a way to access data easily.\n-   General-purpose language. Not a statistical language\n-   Free and open source\n-   User created packages\n-   Steep learning curve\n-   different paths to the \"correct\" answer\n-   Nat Silver apparently does everything in Stata (gross)\n\n## Basic Syntax\n\ncommand(object)\n\nex: print(\"Hello World\")\n\nThere are different types of objects.\n\n-   Objects are assigned with =\n\n    -   in R it is \\<-\n\n-   Objects are defined by type:\n\n    -   scalar (cannot be subdivided)\n\n        -   int - integer, e.g. 3 or 142\n        -   float - real numbers, e.g. 4.2 or -3.5\n        -   bool - Boolean, known as logical in some languages, True or False\n        -   NoneType - a special type with on possible value, none. Basically means NULL.\n\n    -   non-scalar (has an internal structure that can be assessed)\n\n        -   vector, data frame, list.\n\n    -   Can find type in Python with type()\n\n        -   in R it is class()\n\n-   We can convert different types to other types\n\n    -   just be careful!\n\nExpressions = objects + operators\n\n-   akin to taking words and making sentences\n\nWhat are operators?\n\n-   Additions +\n-   Subtraction -\n-   Multiplication \\*\n-   Division /\n-   Modulus %\n-   Exponentiation \\*\\*\n-   Floor division // - rare\n\nPython knows order of operations\n\nExample code chunk:\n\n```{python}\n# this is an example of assigning an object and adding operators to the objects. \npi = 3.14159\nradius = 5 \narea = pi * radius**2 # pi is an object * another object (radius) raised to the second power\nprint(area)\n```\n\nWe can \"rebind\". This assigns a new value to the object of the same name. The object is getting a new value. So be careful when you rebind!\n\n*note*: need to use the print command. In R you could just type the object and it would print. This is not the same in Python.\n\n```{python}\n# Rebinding example \npi = 3.14\nradius = 10 \ncircumference = 2 * pi * radius \nprint(circumference)\n```\n\nEND DAY 1!\n\n# Day 2\n\n## Exercise: Describe how to make coffee in as much detail as possible\n\nTo make coffee I first grab a Keurig coffee cup and put it in my Keurig . Once starting the Keurig , I wait for it to heat up and it begins filling the cup. After, I put my sugar free vanilla creamer inside the the mug. I then mix it up and it is ready to be served.\n\n-   What is the point of this?\n\n    -   Think about how many different tasks you have to go through.\n\n        -   Learning Python is similar. It is a series of small tasks.\n\n            -   we need to spell out each of those tasks that we do without thinking.\n\n                -   they need to be in our code.\n\n                    -   Any big tasks we want Python to do, we need to have it do all those small tasks to make it do that one large task...this is called **control flow.**\n\n## Strings\n\n-   Strings must be in quotes.\n\n-   defined: text, letter, character, space, digits, etc.\n\n-   Use triple quotes for multiple lines of strings.\n\n```{python}\ngreeting = \"Hello! How are you\"\nwho = 'Anastasia' \nprint(greeting)\nprint(greeting + who + '?') # this is concatenating. notice the output. \nprint(greeting + \" \" + who + '?') # this is one way to fix the spacing issue\n# we could also add a space to the object. \n```\n\nLet's try an example of a multi line string:\n\n```{python}\nmy_string = '''\nThis is a string. It is \nspanning multiple lines. \n''' \nprint(my_string)\n```\n\nWe can combine strings with integers.\n\n```{python}\nn_apples = 3 \nprint(\"I ate\", n_apples, \"apples.\") # this is NOT a concatination. The n_apples is still an integer. \n\nprint(\"I ate\", str( n_apples), \"apples.\") # this is a concatination. We convert the int to a string. \n\n# now try to assign a new object\nsentence=(\"I ate \", n_apples, \"apples.\") \nprint(sentence)\ntype(sentence) # notice the type is not a string. We will discuss tuples later.   \n```\n\n### Input\n\nAllows a user to input a response.\n\nExample:\n\n```{python}\n#| eval: false\n# note this code won't run on this website. But you can copy it somewhere else and it will execute. \ntext = input(\"Tell me somethingâ€¦\")\nprint(\"So you are saying\", text) \n```\n\nWe can go further:\n\n```{python}\n#| eval: false\n# this will give you your age. Pretty fun. Note this code will not run on this website. \nbirth_yr = input(\"Type in your birth year:\")\nprint('You are ' + str(2024 - int(birth_yr)) + ' years old.') # if we were to assign this to an object, we would return a string because the middle input is wrapped in a str() function. So it will convert our input which is originally an integer, to a string. \n```\n\n## Boolean\n\n-   Used to compare to variables to one another\n\n-   Used for binary outcomes. True or False?\n\n    -   var1 \\< var2\n\n    -   var1 \\>= var2\n\n    -   var1 \\> var2\n\n    -   var1 \\<= var2\n\n    -   var1 == var2\n\n    -   var1 != var2\n\n-   These will help once we start talking about control flow of a model.\n\n-   Logical operators on Booleans\n\n    -   **not, or , and** are special words for logical operators\n\n    -   **not a**\n\n    -   **a or b**\n\n    -   **a and b**\n\n-   Examples:\n\n    ```{python}\n    hours = 20 \n    # more than a day   \n    print(hours>24) # this will return FALSE. The boolean operator is \">\"\n    ```\n\n```{python}\nfrom pickle import TRUE # this is just a package. the prof originally wrote TRUE but thats for R. Python likes True.\n# how did you commute? \nbike=True\nbus=False\nprint(bike or bus)\nprint(bike and bus)\n```\n\n### Control Flow: Branching\n\nExample: (four) spaces\n\nif \\<condition\\>:\n\n\\<expression\\>\n\n\\<expression\\>\n\n-   Spaces/ white space matters in python!\n\n-   the expressions should be (by convention) be indented by 4 spaces or a Tab\n\n-   that's how Python understands that those are the expression to be run if the condition is True\n\n-   once indented is removed, it'll be back to evaluating everything.\n\n```{python}\n#| eval: false\nif <condition>:\n  <expression1> # evaluate expression1 if condition is True, otherwise evaluate expression2. \nelse: \n  <expression> # notice all the white space. This matters in Python! \n```\n\nLet's use the modulus boolean as an example:\n\n```{python}\nnumber=12 # change this number and see how the output changes! \nif number % 2 == 0: # if the number after being divided by 2 has a remainder of zero then it is even. \n  print(\"Number is even.\")\nelse: \n  print(\"Number is odd.\")\n```\n\n### if statements\n\nLonger example of control flow:\n\n-   elif is short for else if\n\n-   if condition 1 is true, evaluate expression 1\n\n-   if condition 1 is not true but condition 2 is true, evaluate expression 2.\n\n-   Last expression is evaluated only if all the other conditions are False.\n\n-   Basically Python hits the first condition that returns as True.\n\n```{python}\n#| eval: false\nif <condition1>:\n  <expression1> \nelif <condition2>: \n  <expression2> \nelif <condition3>: \n  <expression3> \nelse: \n  <expression4>\n# Basically start from the top. If not this condition then move to next one until condition is met. you can have as many elif \n```\n\nFurther example:\n\n```{python}\nnumber=0 # change this number and notice how the output changes. \nif number > 0: \n  print(\"positive number\")\nelif number == 0: \n  print(\"Zero\")\nelse: \n  print(\"Negative number\")\n  \nprint(\"This statement is always executed\") # notice the white space \n```\n\n**Beware the Nested Statements!**\n\n-   how do you know which else belongs to which if?\n\n    -   Answer: Indention\n\n    ```{python}\n    number=72 # change this number to see how the output changes! \n    if number % 2 == 0:\n      print(\"Number is even.\")\n      if number % 3 == 0: \n        print(\"Number is divisible by 6.\")\n      else: \n        print(\"Number is not divisable by 6.\")\n    else: \n      print(\"Number is odd.\")\n    ```\n\n### while statements\n\n-   Keeps running as long as condition is True\n\n```{python}\n#| eval: false\n\n```\n\nExamples:\n\n```{python}\n# program to display numbers from 1 to 5\n# intialize the variable \ni=1\nn=5\n# while loop from i = 1 to 5 \nwhile i <= n: \n  print(i)\n  i=i+1 # see what happens when you take this part of the function out. (its not good)\n```\n\n```{python}\nnumber=700\n# this function below keeps adding 1 until the number is divisible by 13.\nwhile not number %13==0: #notice the not function\n  print(number, \"is not divisible by 13.\")\n  number=number+1 \n\nprint(number, \"is divisible by 13.\")\n```\n\n### for statements\n\n-   useful for when number of iterations are known\n\n-   Its function can be achieved by a while loop, but for loop is easier\n\n-   every time through the loop, \\<variable\\> assumes a new value (iterating through \\<iterable\\>)\n\n```{python}\n#| eval: false\nfor <variable> in <iterable>: \n  <expression>\n  <expression>\n```\n\n-   iterable is usually range (\\<some_num\\>)\n\n-   can also be a list\n\n-   range(start, stop, step)\n\n-   start =0 and step = 1\n\n-   only stop is required\n\n-   it will start at 0, loop until stop-1.\n\n-   **Python starts counting at ZERO NOT at one!**\n\n```{python}\nfor i in range(5):\n  print(i)\n```\n\n```{python}\nfor i in range(11, 15):\n  print(i)\n```\n\n```{python}\nfor i in range(10, 30, 5):\n  print(i)\n```\n\n```{python}\nfor char in 'MICHIGAN':\n  print(char+ \"!\") # this iterates through strings. \n  # we use i for integers usually, so we are using char to denote string. \n```\n\n```{python}\nfor i in range(10, 30, 5):\n  print(i%10)\n```\n\n### Break statements\n\n-   exits the loop it is in\n\n-   remaining expressions are not evaluated\n\n-   in nested loops, only innermost loops exited\n\n```{python}\nfor i in range(1,4):\n  for j in range(1,4):\n    if i==2 and j==2: \n      break\n    print(i,j)\n```\n\n-   continue statement is similar but continues the loop over the specific iteration.\n\n```{python}\nvar=7\nwhile var>0:\n  var-=1\n  if var==5: #this will skip 5 \n    continue\n  if var==2: # this will terminate the loop at 2\n    break\n  print(\"current variable value\", var)\n  \nprint(\"goodbye!\")\n```\n\n## Lists\n\n-   lists are on of four built-in data types to store collections of data\n\n-   the other are tuples, dictionaries, and sets.\n\n-   used to store items in a single variable.\n\n```{python}\nmy_list=[\"apple\", \"orange\", \"banana\", \"cherry\"]\ntype(my_list)\nmy_list[2]\n```\n\n-   large lists require more computer power.\n\n-   lists always start with a square bracket\n\n    -   parenthesis create a tuple.\n\n-   items in a list don't need to be of the same type.\n\n```{python}\n#| eval: false \n# quarot doesn't like empty lists for some reason. So this code won't run on here.\nmisc_list=[\"apple\", 3, False, None]\nempty_list[ ]\nprint(misc_list)\nprint(empty_list)\n```\n\n-   lists are **ORDERED**\n\n-   lists contain the same elements.\n\n## Methods\n\n-   in Python, \"methods\" are functions that belong to an object\n\n-   they only work with that object\n\n-   Some list methods include:\n\n    -   append - adds element to end.\n\n    -   insert - adds an element at the specified position\n\n    -   reverse - reverses the order of the list\n\n    -   sort - sorts the list - object type determines method of sort.\n\n    -   index - returns the index of the first element with the specified value\n\n    -   sorted\n\n    -   extend - adds the elements of a list (or any interable), to the end of the current list\n\n    -   \\+ add lists together without modifying original lists.\n\n    -   del - remove an element from a list.\n\n```{python}\ncars=[\"Ford\", \"BMW\"]\ncars.append('Mazda')\nprint(cars)\n```\n\n-   note that no re-assignment is necessary\n\n-   once append() is run, the list is modified in memory.\n\n-   avoid \".\" (dots) in the naming of objects because they have usage in python.\n\nEND DAY 2\n\n# Day 3\n\n## Review\n\nWrite a script that checks whether a number is even.\n\n```{python}\n#| eval: false \nnumber = int(input(\"choose any number \")) # we wrap in int() b/c input returns a string.\nif number % 2 == 0: \n  print(number, \"is even.\")\nelse:\n  print(number, \"is odd.\")\n\nprint(\"Goodbye!\")\n```\n\n## Slicing\n\nLists can be sliced with the following syntax:\n\n-   \\[start:stop:step\\]\n\n    -   start at start (default is zero)\n\n    -   stop one step before stop (default is length of list)\n\n    -   step specifies how many indices to jump.\n\n        ```{python}\n        numbers = [1,2,3,4,5,6,7,8]\n        numbers[:3] # count and stop at 2 \n        # or \n        numbers [::2] # move in steps of 2 \n        ```\n\n## Tuples\n\n-   ordered sequence of items\n\n-   a type of object.\n\n-   unlike lists, tuples are immutable\n\n    -   immutable means the values cannot be changed after it has been created.\n\n-   They are typically created with parenthesis ()\n\n-   Example:\n\n    ```{python}\n    tpl = ('a',5,True)\n    print(tpl)\n    ```\n\n### Why use tuples?\n\n-   used to conveniently swap variable values\n\n-   used to return more than one value from a function, since it conveniently packages many values of different type into one object.\n\n-   not super common TBH. Probably won't use much. But they are just something to be aware of.\n\n-   Tuples have two methods\n\n    -   count()\n\n    -   index()\n\n    ```{python}\n    tpl=('a','b','a')\n    print(tpl.count('a'))\n    print(tpl.index('b'))\n    ```\n\n## Sets\n\n-   Sets do not order items\n\n-   sets store unique elements - **no duplicates**\n\n-   uses hashing to efficiently store and retrieve\n\n-   great for quick lookup (does not take much time/RAM)\n\n-   sets created with curly {} braces\n\n    ```{python}\n    my_set={15,'a',4,'k'}\n    my_empty_set=set() # creates an empty set\n    ```\n\nAdditional Set example:\n\n```{python}\nflight_banned = {\"Jane\", \"Josh\", \"John\", \"Jess\"}\n\"John\" in flight_banned\n```\n\nDifference between sets and Lists:\n\n-   Sets:\n\n    -   will only check the memory location where item could be\n\n-   Lists:\n\n    -   it will check all of the lists one by one, till the end if necessary.\n\n## Strings\n\n-   Defined: text, letter, character, space, digits, etc.\n\n-   create. with single or double quotes (needs to be consistent use)\n\n-   strings can also be created with triple quotes.\n\n    -   these handle multi-line strings.\n\n### String Methods\n\n-   startswith()\n\n-   endswith()\n\n-   capitalize() capitalizes the first character\n\n-   title() capitalizes the first character in every word\n\n-   upper() capitalizes everything\n\n-   lower() converts string to all lowercase.\n\n```{python}\nexample_string = \"the New York Times\"\nexample_string.upper() # can also wrap this in a print() function. \n```\n\n## Dictionaries\n\n-   Dictionaries are objects in Python that contain both **key** and **value** pairs:\n\n    ```{python}\n    salary = {\"Jane\":100, \"Jess\":150, \"Janet\": 200}\n    salary[\"Jane\"] #notice the value returned.  \n    ```\n\n-   Values\n\n    -   any type (mutable and immutable)\n\n    -   can be duplicates\n\n    -   can be lists, other dictionaries, any type\n\n-   keys\n\n    -   must be unique\n\n    -   must be immutable type (int, float, string, tuple, bool)\n\n-   no order to keys (and thus values), just like there is no order in a set.\n\n-   \\[key:value, key:value, key:value...\\]\n\n### Dictionary methods\n\n-   .index\n\n-   .keys\n\n-   .values\n\n```{python}\nsalary = {\"Jane\":100, \"Jess\":150, \"Janet\": 200}\nsalary[\"Jane\"] #find Jane's salary \nsalary[\"Jess\"] = 175 # change Jess' salary \nsalary[\"Allison\"] = 130 #adding allison to dictionary \n```\n\n#### Iterating over a dictionary\n\n```{python}\ngrades = {\"Ali\" : \"A+\", \"Bella\" : \"A+\", \"Rose\" : \"A\", \"Sam\" : \"B+\"}\nfor person in grades:\n  print(person + \"'s grade is \" + grades[person]+\".\")\n```\n\n## Functions\n\n-   reusable pieces of code\n\n-   functions are not run until they are called/invoked somewhere.\n\n-   function characteristics:\n\n    -   has a name\n\n    -   has parameters\n\n    -   has a docstring (optional but recommended)\n\n        -   help file for your function. Tells you what the function does basically.\n\n    -   has a body\n\n    -   returns something\n\n-   Saving bits of code to be used later.\n\n-   \"def\" is the keyword used to define the function\n\n-   name of function comes after \"def\"\n\n-   then, in (), comes the parameters/arguments\n\n    ```{python}\n    def is_even(i): # is_even is name of function. i is what we input for the function to evaluate. \n      \"\"\"\n      Input: i is a positive integer\n      Returns True if i is even, otherwise False\n      \"\"\"\n      return i % 2 == 0 \n    is_even(5) # we are saying use the function is_even, which checks to see if we have a remainder after dividing by 2. If we do not, then it is even. \n    # returns a boolean (False or True) based on the input. \n    is_even(4)\n    ```\n\n-   the docstring, enclosed in \"\"\", provides info on how to use the function to the end user.\n\n-   the docstring can be called with help()\n\n-   Be cautious of the variable scope issue.\n\n#### Returns in Functions\n\n-   returns can only be used inside a function\n\n-   there can be multiple returns in a function\n\n-   only of them will be used each time function is invoked\n\n-   once return is hit, function's scope is exited and nothing else in the function is run\n\n```{python}\ndef check_number(number):\n  if number > 0:\n    return \"positive\"\n  elif number < 0: \n    return \"negative\"\n  else: \n    return \"zero\"\n  \ncheck_number(5)\ncheck_number(0)\ncheck_number(-3)\n```\n\n#### Test my knowledge:\n\nWrite a function that tests if number is divisible by 6:\n\n```{python}\ndef divisible_check(x):\n  if x % 6 == 0: \n    return \"this number is divisble by 6\"\n  elif x % 6 != 0: \n    return \"this number is not divisible by 6\"\n  else:\n    return \"undefined\"  \n\ndivisible_check(108) # change the number in the parenthesis to test the output. \n```\n\nWrite a function that creates a dictionary within the function. This function will take a sentence, assign each word as a key, and the value will correspond with the number of times that word appears in sentence.\n\n```{python}\ndef word_freq(sentence):\n  words_list=sentence.split()\n  freq={}\n  for word in words_list:\n    if word in freq:\n      freq[word] += 1\n    else:\n      freq[word] = 1\n  return freq\n\nquote = '''Let me tell you the story when the level 600 school gyatt walked \npassed me, I was in class drinking my grimace rizz shake from ohio during my \nrizzonomics class when all of the sudden this crazy ohio bing chilling gyatt got \nsturdy, past my class. I was watching kai cenat hit the griddy on twitch. \nThis is when I let my rizz take over and I became the rizzard of oz. I screamed, \nlook at this bomboclat gyatt'''\nword_freq(quote)\n```\n\n-   Why do we use the lm() command in R?\n\n    -   why not just use the formula (X'X)\\^-1 X'y?\n\n        -   the lm command is a function.\n\n            -   its easier to use as it executes the formula.\n\n## Modules\n\n-   python modules are files (.py) that (mainly) contain function definitions\n\n-   they allow us to organize, distribute code; to share and reuse others' code.\n\n-   keep code coherent and self-contained.\n\n-   one can import modules or some functions from modules.\n\n### example:\n\ninstead of below\n\n```{python}\ndef add(a,b):\n  return a+b\n```\n\nwe could create a module that contains this function:\n\n```{python}\n#| eval: false \n# use math_operations.py\n# note this code did not work. Skip for now\nimport math_operations \nmat_operations.add(3,5)\n```\n\nTry this example instead:\n\n```{python}\nfrom datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n```\n\nWe are basically bringing in packages and incorporating the functions contained within them to use for our code.\n\n## Comprehensions\n\n-   short hand code to replace for/while loops and if/else statements\n\n-   **comprehensions** provide simple syntax to achieve it in a single line.\n\n-   can be used for lists, sets, and dictionaries\n\n-   Overall: makes code shorter and easier to read\n\n#### Example:\n\nWith for loop:\n\n```{python}\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nnew_list=[]\nfor number in numbers: \n  new_list.append(number)\nprint(new_list)\n```\n\nwith list comprehension:\n\n```{python}\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nnew_list = [num for num in numbers] # this is the exact same thing as the loop above. Just more condensed \nprint(new_list)\n```\n\nEND DAY 3!\n\n# Day 4\n\n## Review:\n\nWrite a function that, given dictionary consisting of vehicles and their weights in kilograms, constructs a list of the names of vehicles with weight below 2000 kilograms. Use list comprehension to achieve this.\n\nWith list comprehension:\n\n```{python}\nd={\"Sedan\": 1500, \"SUV\":2000, \"Pickup\": 2500, \"Minivan\":1600, \"Van\":2400, \"Semi\":13600, \"Bicycle\":7, \"Motorcycle\":110}\nget_lighter_vehicles=[weight for weight in d if d[weight]<2000]\nprint(get_lighter_vehicles)\n```\n\nWithout list comprehension:\n\n```{python}\nd={\"Sedan\": 1500, \"SUV\":2000, \"Pickup\": 2500, \"Minivan\":1600, \"Van\":2400, \"Semi\":13600, \"Bicycle\":7, \"Motorcycle\":110}\nfor weight in d:\n  if d[weight]<2000:\n    print(weight)\n```\n\n## Requests and APIs\n\n-   Let's first talk about how the internet works.\n\n    -   Clients & Servers:\n\n        -   data (web pages) lives on servers\n\n        -   browsers, apps, etc. are clients\n\n        -   clients send requests to servers\n\n        -   servers serve the necessary files to users\n\n-   To request data from these servers we use the \"requests\" library in Python\n\n    -   allows us to send requests to servers\n\n    -   need internet connection\n\nExample:\n\n```{python}\nimport requests\nr = requests.get('https://www.python.org/')\nr.status_code\n# you should get 200\n# if you get anything else. Something is wrong and is not working. \n```\n\nIf I were to run the following code:\n\n```{python}\n#| eval: false\nprint(r.text) # this gives you all the html code of the page. \n```\n\nThis would print out the html code for the entire webpage. While this may seem scary, this is actually great! Because html is another coding language, by knowing just a little of html, I can pick and choose what parts of the webpage I want. Below is some basic code and information for html documents:\n\n-   style information, including links to CSS files\n\n-   Javascript scripts and links to javascript files\n\n-   html tags (just add \"\\<\\>\" around these head, li, div, img, etc)\n\n-   classes, ids, toggle buttons, many more\n\n-   navigation bar, side bar, footer.\n\nHow do parse through all of this code? We use a **parser.**\n\n-   a parser is a software that recognizes the structure of an HTML document\n\n-   allows the extraction of certain parts of the code\n\n-   the \"BeautifulSoup\" library serves that purpose\n\n### APIs\n\n-   Application Programming Interface (API) provide structured data.\n\n    -   structured basically means csv files, etc.\n\n-   they allow for the building of applications\n\n-   separate design from content\n\n-   access the data directly\n\n#### Requests to APIs:\n\n-   GET (get/retrieve data from server)\n\n    -   *We only looked at this for the workshop.*\n\n-   POST (update data on server)\n\n-   PUT (add data to server)\n\n-   DELETE (delete data from server)\n\nMany governmental agencies, newspapers, and common data sources have public APIs that can be accessed from R or Python\n\n-   you might need a key (permission) to access the data.\n\n### GET requests to an API\n\n-   requests typically start with an endpoint defined by the host (server)\n\n-   For example:\n\n    -   Wikipedia provides one endpoint\n\n    -   YouTube provides many endpoints, depending on what one is working with.\n\n-   Format of parameters\n\n    -   ?param1=value1&param2=value2&param3=value3...\n\n    -   parameters is how we define what we want from the API.\n\n-   Follow example in pdf documentation for class.\n\nEND DAY 4!\n","srcMarkdownNoYaml":"\n\n# Preface\n\nIntroduction to Python with Professor Sarah Hunter was a workshop taken at ICPSR in the summer of 2024. You cannot memorize this. Practice makes perfect. You must use it or you will lose it. This course covers the absolute *basics*.\n\n# Software\n\nGoogle Colab is main software used - **this is the one used during class.**\n\n-   be careful with the google AI that helps you with the code. It's cool but not very accurate as of right now.\n\nOptional: Spyder - Spyder is an IDE that makes it similar to an interface like R studio.\n\nOptional: Jupyter Notebooks\n\nIf you want to work with data that is sensitive or private, do NOT upload it to any cloud service. In this case, use Spyder and download/work with the data locally.\n\n# Day 1 - Introduction and Language Basics\n\nIf I want to download Python locally, talk to a TA.\n\n## Getting to know Python\n\n-   Python is more flexible and general than R.\n-   Object oriented\n    -   R is also object oriented.\n-   R is very similar to Python.\n    -   basic syntax is similar.\n-   Why learn python?\n    -   its the most popular programming language\n\n    -   Python is used a lot by data analyst\n\n        -   text analysis, machine learning, and AI are big on Python.\n\n    -   Web scraping very big on Python\n\n    -   Accessing APIs with Python good as well.\n\n        -   APIs are just a way to access data easily.\n-   General-purpose language. Not a statistical language\n-   Free and open source\n-   User created packages\n-   Steep learning curve\n-   different paths to the \"correct\" answer\n-   Nat Silver apparently does everything in Stata (gross)\n\n## Basic Syntax\n\ncommand(object)\n\nex: print(\"Hello World\")\n\nThere are different types of objects.\n\n-   Objects are assigned with =\n\n    -   in R it is \\<-\n\n-   Objects are defined by type:\n\n    -   scalar (cannot be subdivided)\n\n        -   int - integer, e.g. 3 or 142\n        -   float - real numbers, e.g. 4.2 or -3.5\n        -   bool - Boolean, known as logical in some languages, True or False\n        -   NoneType - a special type with on possible value, none. Basically means NULL.\n\n    -   non-scalar (has an internal structure that can be assessed)\n\n        -   vector, data frame, list.\n\n    -   Can find type in Python with type()\n\n        -   in R it is class()\n\n-   We can convert different types to other types\n\n    -   just be careful!\n\nExpressions = objects + operators\n\n-   akin to taking words and making sentences\n\nWhat are operators?\n\n-   Additions +\n-   Subtraction -\n-   Multiplication \\*\n-   Division /\n-   Modulus %\n-   Exponentiation \\*\\*\n-   Floor division // - rare\n\nPython knows order of operations\n\nExample code chunk:\n\n```{python}\n# this is an example of assigning an object and adding operators to the objects. \npi = 3.14159\nradius = 5 \narea = pi * radius**2 # pi is an object * another object (radius) raised to the second power\nprint(area)\n```\n\nWe can \"rebind\". This assigns a new value to the object of the same name. The object is getting a new value. So be careful when you rebind!\n\n*note*: need to use the print command. In R you could just type the object and it would print. This is not the same in Python.\n\n```{python}\n# Rebinding example \npi = 3.14\nradius = 10 \ncircumference = 2 * pi * radius \nprint(circumference)\n```\n\nEND DAY 1!\n\n# Day 2\n\n## Exercise: Describe how to make coffee in as much detail as possible\n\nTo make coffee I first grab a Keurig coffee cup and put it in my Keurig . Once starting the Keurig , I wait for it to heat up and it begins filling the cup. After, I put my sugar free vanilla creamer inside the the mug. I then mix it up and it is ready to be served.\n\n-   What is the point of this?\n\n    -   Think about how many different tasks you have to go through.\n\n        -   Learning Python is similar. It is a series of small tasks.\n\n            -   we need to spell out each of those tasks that we do without thinking.\n\n                -   they need to be in our code.\n\n                    -   Any big tasks we want Python to do, we need to have it do all those small tasks to make it do that one large task...this is called **control flow.**\n\n## Strings\n\n-   Strings must be in quotes.\n\n-   defined: text, letter, character, space, digits, etc.\n\n-   Use triple quotes for multiple lines of strings.\n\n```{python}\ngreeting = \"Hello! How are you\"\nwho = 'Anastasia' \nprint(greeting)\nprint(greeting + who + '?') # this is concatenating. notice the output. \nprint(greeting + \" \" + who + '?') # this is one way to fix the spacing issue\n# we could also add a space to the object. \n```\n\nLet's try an example of a multi line string:\n\n```{python}\nmy_string = '''\nThis is a string. It is \nspanning multiple lines. \n''' \nprint(my_string)\n```\n\nWe can combine strings with integers.\n\n```{python}\nn_apples = 3 \nprint(\"I ate\", n_apples, \"apples.\") # this is NOT a concatination. The n_apples is still an integer. \n\nprint(\"I ate\", str( n_apples), \"apples.\") # this is a concatination. We convert the int to a string. \n\n# now try to assign a new object\nsentence=(\"I ate \", n_apples, \"apples.\") \nprint(sentence)\ntype(sentence) # notice the type is not a string. We will discuss tuples later.   \n```\n\n### Input\n\nAllows a user to input a response.\n\nExample:\n\n```{python}\n#| eval: false\n# note this code won't run on this website. But you can copy it somewhere else and it will execute. \ntext = input(\"Tell me somethingâ€¦\")\nprint(\"So you are saying\", text) \n```\n\nWe can go further:\n\n```{python}\n#| eval: false\n# this will give you your age. Pretty fun. Note this code will not run on this website. \nbirth_yr = input(\"Type in your birth year:\")\nprint('You are ' + str(2024 - int(birth_yr)) + ' years old.') # if we were to assign this to an object, we would return a string because the middle input is wrapped in a str() function. So it will convert our input which is originally an integer, to a string. \n```\n\n## Boolean\n\n-   Used to compare to variables to one another\n\n-   Used for binary outcomes. True or False?\n\n    -   var1 \\< var2\n\n    -   var1 \\>= var2\n\n    -   var1 \\> var2\n\n    -   var1 \\<= var2\n\n    -   var1 == var2\n\n    -   var1 != var2\n\n-   These will help once we start talking about control flow of a model.\n\n-   Logical operators on Booleans\n\n    -   **not, or , and** are special words for logical operators\n\n    -   **not a**\n\n    -   **a or b**\n\n    -   **a and b**\n\n-   Examples:\n\n    ```{python}\n    hours = 20 \n    # more than a day   \n    print(hours>24) # this will return FALSE. The boolean operator is \">\"\n    ```\n\n```{python}\nfrom pickle import TRUE # this is just a package. the prof originally wrote TRUE but thats for R. Python likes True.\n# how did you commute? \nbike=True\nbus=False\nprint(bike or bus)\nprint(bike and bus)\n```\n\n### Control Flow: Branching\n\nExample: (four) spaces\n\nif \\<condition\\>:\n\n\\<expression\\>\n\n\\<expression\\>\n\n-   Spaces/ white space matters in python!\n\n-   the expressions should be (by convention) be indented by 4 spaces or a Tab\n\n-   that's how Python understands that those are the expression to be run if the condition is True\n\n-   once indented is removed, it'll be back to evaluating everything.\n\n```{python}\n#| eval: false\nif <condition>:\n  <expression1> # evaluate expression1 if condition is True, otherwise evaluate expression2. \nelse: \n  <expression> # notice all the white space. This matters in Python! \n```\n\nLet's use the modulus boolean as an example:\n\n```{python}\nnumber=12 # change this number and see how the output changes! \nif number % 2 == 0: # if the number after being divided by 2 has a remainder of zero then it is even. \n  print(\"Number is even.\")\nelse: \n  print(\"Number is odd.\")\n```\n\n### if statements\n\nLonger example of control flow:\n\n-   elif is short for else if\n\n-   if condition 1 is true, evaluate expression 1\n\n-   if condition 1 is not true but condition 2 is true, evaluate expression 2.\n\n-   Last expression is evaluated only if all the other conditions are False.\n\n-   Basically Python hits the first condition that returns as True.\n\n```{python}\n#| eval: false\nif <condition1>:\n  <expression1> \nelif <condition2>: \n  <expression2> \nelif <condition3>: \n  <expression3> \nelse: \n  <expression4>\n# Basically start from the top. If not this condition then move to next one until condition is met. you can have as many elif \n```\n\nFurther example:\n\n```{python}\nnumber=0 # change this number and notice how the output changes. \nif number > 0: \n  print(\"positive number\")\nelif number == 0: \n  print(\"Zero\")\nelse: \n  print(\"Negative number\")\n  \nprint(\"This statement is always executed\") # notice the white space \n```\n\n**Beware the Nested Statements!**\n\n-   how do you know which else belongs to which if?\n\n    -   Answer: Indention\n\n    ```{python}\n    number=72 # change this number to see how the output changes! \n    if number % 2 == 0:\n      print(\"Number is even.\")\n      if number % 3 == 0: \n        print(\"Number is divisible by 6.\")\n      else: \n        print(\"Number is not divisable by 6.\")\n    else: \n      print(\"Number is odd.\")\n    ```\n\n### while statements\n\n-   Keeps running as long as condition is True\n\n```{python}\n#| eval: false\n\n```\n\nExamples:\n\n```{python}\n# program to display numbers from 1 to 5\n# intialize the variable \ni=1\nn=5\n# while loop from i = 1 to 5 \nwhile i <= n: \n  print(i)\n  i=i+1 # see what happens when you take this part of the function out. (its not good)\n```\n\n```{python}\nnumber=700\n# this function below keeps adding 1 until the number is divisible by 13.\nwhile not number %13==0: #notice the not function\n  print(number, \"is not divisible by 13.\")\n  number=number+1 \n\nprint(number, \"is divisible by 13.\")\n```\n\n### for statements\n\n-   useful for when number of iterations are known\n\n-   Its function can be achieved by a while loop, but for loop is easier\n\n-   every time through the loop, \\<variable\\> assumes a new value (iterating through \\<iterable\\>)\n\n```{python}\n#| eval: false\nfor <variable> in <iterable>: \n  <expression>\n  <expression>\n```\n\n-   iterable is usually range (\\<some_num\\>)\n\n-   can also be a list\n\n-   range(start, stop, step)\n\n-   start =0 and step = 1\n\n-   only stop is required\n\n-   it will start at 0, loop until stop-1.\n\n-   **Python starts counting at ZERO NOT at one!**\n\n```{python}\nfor i in range(5):\n  print(i)\n```\n\n```{python}\nfor i in range(11, 15):\n  print(i)\n```\n\n```{python}\nfor i in range(10, 30, 5):\n  print(i)\n```\n\n```{python}\nfor char in 'MICHIGAN':\n  print(char+ \"!\") # this iterates through strings. \n  # we use i for integers usually, so we are using char to denote string. \n```\n\n```{python}\nfor i in range(10, 30, 5):\n  print(i%10)\n```\n\n### Break statements\n\n-   exits the loop it is in\n\n-   remaining expressions are not evaluated\n\n-   in nested loops, only innermost loops exited\n\n```{python}\nfor i in range(1,4):\n  for j in range(1,4):\n    if i==2 and j==2: \n      break\n    print(i,j)\n```\n\n-   continue statement is similar but continues the loop over the specific iteration.\n\n```{python}\nvar=7\nwhile var>0:\n  var-=1\n  if var==5: #this will skip 5 \n    continue\n  if var==2: # this will terminate the loop at 2\n    break\n  print(\"current variable value\", var)\n  \nprint(\"goodbye!\")\n```\n\n## Lists\n\n-   lists are on of four built-in data types to store collections of data\n\n-   the other are tuples, dictionaries, and sets.\n\n-   used to store items in a single variable.\n\n```{python}\nmy_list=[\"apple\", \"orange\", \"banana\", \"cherry\"]\ntype(my_list)\nmy_list[2]\n```\n\n-   large lists require more computer power.\n\n-   lists always start with a square bracket\n\n    -   parenthesis create a tuple.\n\n-   items in a list don't need to be of the same type.\n\n```{python}\n#| eval: false \n# quarot doesn't like empty lists for some reason. So this code won't run on here.\nmisc_list=[\"apple\", 3, False, None]\nempty_list[ ]\nprint(misc_list)\nprint(empty_list)\n```\n\n-   lists are **ORDERED**\n\n-   lists contain the same elements.\n\n## Methods\n\n-   in Python, \"methods\" are functions that belong to an object\n\n-   they only work with that object\n\n-   Some list methods include:\n\n    -   append - adds element to end.\n\n    -   insert - adds an element at the specified position\n\n    -   reverse - reverses the order of the list\n\n    -   sort - sorts the list - object type determines method of sort.\n\n    -   index - returns the index of the first element with the specified value\n\n    -   sorted\n\n    -   extend - adds the elements of a list (or any interable), to the end of the current list\n\n    -   \\+ add lists together without modifying original lists.\n\n    -   del - remove an element from a list.\n\n```{python}\ncars=[\"Ford\", \"BMW\"]\ncars.append('Mazda')\nprint(cars)\n```\n\n-   note that no re-assignment is necessary\n\n-   once append() is run, the list is modified in memory.\n\n-   avoid \".\" (dots) in the naming of objects because they have usage in python.\n\nEND DAY 2\n\n# Day 3\n\n## Review\n\nWrite a script that checks whether a number is even.\n\n```{python}\n#| eval: false \nnumber = int(input(\"choose any number \")) # we wrap in int() b/c input returns a string.\nif number % 2 == 0: \n  print(number, \"is even.\")\nelse:\n  print(number, \"is odd.\")\n\nprint(\"Goodbye!\")\n```\n\n## Slicing\n\nLists can be sliced with the following syntax:\n\n-   \\[start:stop:step\\]\n\n    -   start at start (default is zero)\n\n    -   stop one step before stop (default is length of list)\n\n    -   step specifies how many indices to jump.\n\n        ```{python}\n        numbers = [1,2,3,4,5,6,7,8]\n        numbers[:3] # count and stop at 2 \n        # or \n        numbers [::2] # move in steps of 2 \n        ```\n\n## Tuples\n\n-   ordered sequence of items\n\n-   a type of object.\n\n-   unlike lists, tuples are immutable\n\n    -   immutable means the values cannot be changed after it has been created.\n\n-   They are typically created with parenthesis ()\n\n-   Example:\n\n    ```{python}\n    tpl = ('a',5,True)\n    print(tpl)\n    ```\n\n### Why use tuples?\n\n-   used to conveniently swap variable values\n\n-   used to return more than one value from a function, since it conveniently packages many values of different type into one object.\n\n-   not super common TBH. Probably won't use much. But they are just something to be aware of.\n\n-   Tuples have two methods\n\n    -   count()\n\n    -   index()\n\n    ```{python}\n    tpl=('a','b','a')\n    print(tpl.count('a'))\n    print(tpl.index('b'))\n    ```\n\n## Sets\n\n-   Sets do not order items\n\n-   sets store unique elements - **no duplicates**\n\n-   uses hashing to efficiently store and retrieve\n\n-   great for quick lookup (does not take much time/RAM)\n\n-   sets created with curly {} braces\n\n    ```{python}\n    my_set={15,'a',4,'k'}\n    my_empty_set=set() # creates an empty set\n    ```\n\nAdditional Set example:\n\n```{python}\nflight_banned = {\"Jane\", \"Josh\", \"John\", \"Jess\"}\n\"John\" in flight_banned\n```\n\nDifference between sets and Lists:\n\n-   Sets:\n\n    -   will only check the memory location where item could be\n\n-   Lists:\n\n    -   it will check all of the lists one by one, till the end if necessary.\n\n## Strings\n\n-   Defined: text, letter, character, space, digits, etc.\n\n-   create. with single or double quotes (needs to be consistent use)\n\n-   strings can also be created with triple quotes.\n\n    -   these handle multi-line strings.\n\n### String Methods\n\n-   startswith()\n\n-   endswith()\n\n-   capitalize() capitalizes the first character\n\n-   title() capitalizes the first character in every word\n\n-   upper() capitalizes everything\n\n-   lower() converts string to all lowercase.\n\n```{python}\nexample_string = \"the New York Times\"\nexample_string.upper() # can also wrap this in a print() function. \n```\n\n## Dictionaries\n\n-   Dictionaries are objects in Python that contain both **key** and **value** pairs:\n\n    ```{python}\n    salary = {\"Jane\":100, \"Jess\":150, \"Janet\": 200}\n    salary[\"Jane\"] #notice the value returned.  \n    ```\n\n-   Values\n\n    -   any type (mutable and immutable)\n\n    -   can be duplicates\n\n    -   can be lists, other dictionaries, any type\n\n-   keys\n\n    -   must be unique\n\n    -   must be immutable type (int, float, string, tuple, bool)\n\n-   no order to keys (and thus values), just like there is no order in a set.\n\n-   \\[key:value, key:value, key:value...\\]\n\n### Dictionary methods\n\n-   .index\n\n-   .keys\n\n-   .values\n\n```{python}\nsalary = {\"Jane\":100, \"Jess\":150, \"Janet\": 200}\nsalary[\"Jane\"] #find Jane's salary \nsalary[\"Jess\"] = 175 # change Jess' salary \nsalary[\"Allison\"] = 130 #adding allison to dictionary \n```\n\n#### Iterating over a dictionary\n\n```{python}\ngrades = {\"Ali\" : \"A+\", \"Bella\" : \"A+\", \"Rose\" : \"A\", \"Sam\" : \"B+\"}\nfor person in grades:\n  print(person + \"'s grade is \" + grades[person]+\".\")\n```\n\n## Functions\n\n-   reusable pieces of code\n\n-   functions are not run until they are called/invoked somewhere.\n\n-   function characteristics:\n\n    -   has a name\n\n    -   has parameters\n\n    -   has a docstring (optional but recommended)\n\n        -   help file for your function. Tells you what the function does basically.\n\n    -   has a body\n\n    -   returns something\n\n-   Saving bits of code to be used later.\n\n-   \"def\" is the keyword used to define the function\n\n-   name of function comes after \"def\"\n\n-   then, in (), comes the parameters/arguments\n\n    ```{python}\n    def is_even(i): # is_even is name of function. i is what we input for the function to evaluate. \n      \"\"\"\n      Input: i is a positive integer\n      Returns True if i is even, otherwise False\n      \"\"\"\n      return i % 2 == 0 \n    is_even(5) # we are saying use the function is_even, which checks to see if we have a remainder after dividing by 2. If we do not, then it is even. \n    # returns a boolean (False or True) based on the input. \n    is_even(4)\n    ```\n\n-   the docstring, enclosed in \"\"\", provides info on how to use the function to the end user.\n\n-   the docstring can be called with help()\n\n-   Be cautious of the variable scope issue.\n\n#### Returns in Functions\n\n-   returns can only be used inside a function\n\n-   there can be multiple returns in a function\n\n-   only of them will be used each time function is invoked\n\n-   once return is hit, function's scope is exited and nothing else in the function is run\n\n```{python}\ndef check_number(number):\n  if number > 0:\n    return \"positive\"\n  elif number < 0: \n    return \"negative\"\n  else: \n    return \"zero\"\n  \ncheck_number(5)\ncheck_number(0)\ncheck_number(-3)\n```\n\n#### Test my knowledge:\n\nWrite a function that tests if number is divisible by 6:\n\n```{python}\ndef divisible_check(x):\n  if x % 6 == 0: \n    return \"this number is divisble by 6\"\n  elif x % 6 != 0: \n    return \"this number is not divisible by 6\"\n  else:\n    return \"undefined\"  \n\ndivisible_check(108) # change the number in the parenthesis to test the output. \n```\n\nWrite a function that creates a dictionary within the function. This function will take a sentence, assign each word as a key, and the value will correspond with the number of times that word appears in sentence.\n\n```{python}\ndef word_freq(sentence):\n  words_list=sentence.split()\n  freq={}\n  for word in words_list:\n    if word in freq:\n      freq[word] += 1\n    else:\n      freq[word] = 1\n  return freq\n\nquote = '''Let me tell you the story when the level 600 school gyatt walked \npassed me, I was in class drinking my grimace rizz shake from ohio during my \nrizzonomics class when all of the sudden this crazy ohio bing chilling gyatt got \nsturdy, past my class. I was watching kai cenat hit the griddy on twitch. \nThis is when I let my rizz take over and I became the rizzard of oz. I screamed, \nlook at this bomboclat gyatt'''\nword_freq(quote)\n```\n\n-   Why do we use the lm() command in R?\n\n    -   why not just use the formula (X'X)\\^-1 X'y?\n\n        -   the lm command is a function.\n\n            -   its easier to use as it executes the formula.\n\n## Modules\n\n-   python modules are files (.py) that (mainly) contain function definitions\n\n-   they allow us to organize, distribute code; to share and reuse others' code.\n\n-   keep code coherent and self-contained.\n\n-   one can import modules or some functions from modules.\n\n### example:\n\ninstead of below\n\n```{python}\ndef add(a,b):\n  return a+b\n```\n\nwe could create a module that contains this function:\n\n```{python}\n#| eval: false \n# use math_operations.py\n# note this code did not work. Skip for now\nimport math_operations \nmat_operations.add(3,5)\n```\n\nTry this example instead:\n\n```{python}\nfrom datetime import date\ntoday = date.today()\nprint(\"Today's date:\", today)\n```\n\nWe are basically bringing in packages and incorporating the functions contained within them to use for our code.\n\n## Comprehensions\n\n-   short hand code to replace for/while loops and if/else statements\n\n-   **comprehensions** provide simple syntax to achieve it in a single line.\n\n-   can be used for lists, sets, and dictionaries\n\n-   Overall: makes code shorter and easier to read\n\n#### Example:\n\nWith for loop:\n\n```{python}\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nnew_list=[]\nfor number in numbers: \n  new_list.append(number)\nprint(new_list)\n```\n\nwith list comprehension:\n\n```{python}\nnumbers = [1,2,3,4,5,6,7,8,9,10]\nnew_list = [num for num in numbers] # this is the exact same thing as the loop above. Just more condensed \nprint(new_list)\n```\n\nEND DAY 3!\n\n# Day 4\n\n## Review:\n\nWrite a function that, given dictionary consisting of vehicles and their weights in kilograms, constructs a list of the names of vehicles with weight below 2000 kilograms. Use list comprehension to achieve this.\n\nWith list comprehension:\n\n```{python}\nd={\"Sedan\": 1500, \"SUV\":2000, \"Pickup\": 2500, \"Minivan\":1600, \"Van\":2400, \"Semi\":13600, \"Bicycle\":7, \"Motorcycle\":110}\nget_lighter_vehicles=[weight for weight in d if d[weight]<2000]\nprint(get_lighter_vehicles)\n```\n\nWithout list comprehension:\n\n```{python}\nd={\"Sedan\": 1500, \"SUV\":2000, \"Pickup\": 2500, \"Minivan\":1600, \"Van\":2400, \"Semi\":13600, \"Bicycle\":7, \"Motorcycle\":110}\nfor weight in d:\n  if d[weight]<2000:\n    print(weight)\n```\n\n## Requests and APIs\n\n-   Let's first talk about how the internet works.\n\n    -   Clients & Servers:\n\n        -   data (web pages) lives on servers\n\n        -   browsers, apps, etc. are clients\n\n        -   clients send requests to servers\n\n        -   servers serve the necessary files to users\n\n-   To request data from these servers we use the \"requests\" library in Python\n\n    -   allows us to send requests to servers\n\n    -   need internet connection\n\nExample:\n\n```{python}\nimport requests\nr = requests.get('https://www.python.org/')\nr.status_code\n# you should get 200\n# if you get anything else. Something is wrong and is not working. \n```\n\nIf I were to run the following code:\n\n```{python}\n#| eval: false\nprint(r.text) # this gives you all the html code of the page. \n```\n\nThis would print out the html code for the entire webpage. While this may seem scary, this is actually great! Because html is another coding language, by knowing just a little of html, I can pick and choose what parts of the webpage I want. Below is some basic code and information for html documents:\n\n-   style information, including links to CSS files\n\n-   Javascript scripts and links to javascript files\n\n-   html tags (just add \"\\<\\>\" around these head, li, div, img, etc)\n\n-   classes, ids, toggle buttons, many more\n\n-   navigation bar, side bar, footer.\n\nHow do parse through all of this code? We use a **parser.**\n\n-   a parser is a software that recognizes the structure of an HTML document\n\n-   allows the extraction of certain parts of the code\n\n-   the \"BeautifulSoup\" library serves that purpose\n\n### APIs\n\n-   Application Programming Interface (API) provide structured data.\n\n    -   structured basically means csv files, etc.\n\n-   they allow for the building of applications\n\n-   separate design from content\n\n-   access the data directly\n\n#### Requests to APIs:\n\n-   GET (get/retrieve data from server)\n\n    -   *We only looked at this for the workshop.*\n\n-   POST (update data on server)\n\n-   PUT (add data to server)\n\n-   DELETE (delete data from server)\n\nMany governmental agencies, newspapers, and common data sources have public APIs that can be accessed from R or Python\n\n-   you might need a key (permission) to access the data.\n\n### GET requests to an API\n\n-   requests typically start with an endpoint defined by the host (server)\n\n-   For example:\n\n    -   Wikipedia provides one endpoint\n\n    -   YouTube provides many endpoints, depending on what one is working with.\n\n-   Format of parameters\n\n    -   ?param1=value1&param2=value2&param3=value3...\n\n    -   parameters is how we define what we want from the API.\n\n-   Follow example in pdf documentation for class.\n\nEND DAY 4!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","editor":"visual","theme":"cosmo","title":"ICPSR - Introduction to Python","author":[{"name":"Stone Neilon","url":"https://samanthacsik.github.io/","orcid":"0000-0002-5300-3075","affiliation":"PhD student of political science @ The University of Colorado Boulder","affiliation-url":"https://ucsb-meds.github.io/"}],"date":"06-10-2024","categories":["Summer","ICPSR",2024,"Methods"],"citation":{"url":"https://samanthacsik.github.io/posts/2022-10-24-my-blog-post/"},"image":"python.png.webp","draft":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}